
from random import randint
from src.tools.query_generator.helpers import *


def expand_from_subject(subject, num_edges):
    edges, entrypoints, objects = [], [], []
    sub = '?' + subject.rsplit('/', 2)[-2][:-1] + '_' + subject.rsplit('/', 2)[-1][:5]
    possible_edges = get_edges_from_subject(subject)
    i = 0
    for pred, obj_list in possible_edges.items():
        if i == num_edges:
            break
        i += 1
        obj = '?' + pred.rsplit('.', 1)[-1].lower()
        edges.append(construct_edge(sub, pred, obj))
        obj_uri = obj_list[randint(0, len(obj_list)-1)]
        entrypoints.append(construct_ep(obj, get_enttype(obj_uri), get_entrypints(obj_uri)))
        objects.append((obj_uri, obj))
    return edges, entrypoints, objects


def augment_from_object(object_uri, object_var_name, num_edges, edges):
    exclude_pred = set([edge[PREDICATE] for edge in edges])
    possible_edges = get_edges_from_object(object_uri, exclude_pred)
    i = 0
    ret = []
    for pred, sub_list in possible_edges.items():
        if i == num_edges:
            break
        i += 1
        sub = '?subject_' + pred.rsplit('.', 1)[-1].lower()
        edges.append(construct_edge(sub, pred, object_var_name))
        ret.append((sub_list[0], sub))
    return ret


def augment_from_subject(subject_uri, subject_var_name, num_edges, edges, entrypoints):
    exclude_pred = set([edge[PREDICATE] for edge in edges])
    possible_edges = get_edges_from_subject(subject_uri, exclude_pred)
    i = 0
    for pred, obj_list in possible_edges.items():
        if i == num_edges:
            break
        i += 1
        obj = '?' + pred.rsplit('.', 1)[-1].lower()
        edges.append(construct_edge(subject_var_name, pred, obj))
        obj_uri = obj_list[randint(0, len(obj_list)-1)]
        entrypoints.append(construct_ep(obj, get_enttype(obj_uri), get_entrypints(obj_uri)))
        # objects.append((obj_uri, obj))
    return


def generate_three_layer_graph(root, max_edges_per_layer):
    edges, entrypoints, objects = expand_from_subject(root, max_edges_per_layer)
    for obj_uri, obj_var_name in objects:
        subs = augment_from_object(obj_uri, obj_var_name, max_edges_per_layer, edges)
        for sub_uri, sub_varname in subs:
            augment_from_subject(sub_uri, sub_varname, max_edges_per_layer, edges, entrypoints)
    return construct_graph(edges, entrypoints)


def run_from_events(cnt, output_folder):
    all_events = get_all_event_uri()
    for i in range(min(cnt, len(all_events))):
        test_query_json = generate_three_layer_graph(all_events[i], 3)
        if not test_query_json['graph']['edges']:
            continue
        # pprint(test_query_json)

        output_file = '%s/autogenerated_query_%d.xml' % (output_folder.rstrip('/'), i)
        xml_res = convert_query_json2xml(test_query_json, 'autogenerated_query_%d' % i)
        write_file(xml_res, output_file)




